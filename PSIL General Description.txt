PSIL (PSIL Seriously Isn't Lisp!)
General Description, Version 3
Author: Timothy Hewitt
Date: 10/3/2016

Introduction:
    PSIL is a pet project of mine that started as a "pure" language with a
    minimal set of syntactic paradigms and a simplified interpreter. It has
    since grown with my knowledge on the subject of programming languages, and
    features an actually interesting modification on lisps.

History:
    PSIL started as a bit of a joke on lisp. I was going to make a language that
    used tons of parentheses so that it looked like lisp, but it used postfix
    notation instead of prefix notation. After discovering the fact that stack
    based languages did not need syntactic analysis, only lexical analysis, I
    decided that I might actually want to make an implementation.

    A few years later I went back and reread the definitions with a more
    objective eye and combined that with my dissatisfaction at the "messieness"
    of most other languages to come up with the goal of a "pure" language.

    That project was finished and sat around for a few years while I learned a
    lot about programming languages and fundamentals of computer science. One
    thought that crossed my mind was "what if lisp used associative arrays
    instead of lists?" After realizing how the operational semantics of such a
    system could work, I rebooted the PSIL project, rewriting it mostly from the
    ground up with the goal of implementing a lisp-alike that worked with
    associative arrays instead of lists. I rewrote the project instead of
    starting a new one because the old project was flawed from many angles and
    the product of an ill-informed but well-meaning freshman bashing his way
    through writing a programming language. This new project has the
    mathematical simplicities of lisp, and should be all the more consistent.

Operation:
    Lisps have lists and atoms. PSIL has associative arrays and sets. The key to
    being able to use associative arrays to define syntax is to allow multiple
    symbols to be treated as a discrete unit. In this case, most functions are
    binary relations, mapping symbols to symbols. When a function symbol is the
    key to a set in an array, the function is mapped over the entire set, thus
    producing a new set, which is then unioned with the results of any other
    pairs in the containing array. When eval is applied to a set, the set is
    returned, since sets are defined as fixed points of eval. Because of this
    'mapping' nature of applying the same function to many symbols at once, PSIL
    lends itself ever so slightly to parallelization, in that each function
    application is independent of the other, and the results are unioned
    together. 
