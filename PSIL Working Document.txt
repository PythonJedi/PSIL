PSIL Language Working Document
Timothy Hewitt
2015-03-04 22:31

Introduction:
    I've written a few files over the months of thinking about this language 
    while attending UTD. All of them evolve over the length of the document,
    creating discrepancies and outright contradictions, especially between
    older and newer documents. I will attempt to remedy the situation with this 
    document, which reflects the latest musings of all the other documents in an 
    organized fashion, and contains less brainstorming, as that has already been
    done.
    
    I also intend to use this as my working document for the UTD CS LLC 
    Hackathon, where I will actually write the preliminary implementation of the
    language. Further refinements will no doubt transition into rPython and 
    eventually C (probably not C++).
    
1. Purpose and Goals:
    The purpose of PSIL to be is an exercise in language design.

    1. Syntax design goals:
        1. Never have more than one syntax to express the same action
        2. Refrain from syntactically differentiating imperative invocations
        3. Trim core language elements to absolute necessities
        4. Include useful but not necessary components in low-level stdlib
        5. Use lots of parentheses (Holdover from when it was a joke on lisp)

    2. Data model goals:
        1. Make call stack visible to programmer
        2. Make named data separate from call stack
        3. Organize named data in a namespace tree
        4. Make code a type of data (one positive of lisp, python, and such)
        5. Use a weak type system (Dynamic evaluation can handle weak typing)

    3. Execution model goals:
        1. As per 1.2.3, data is bound in a hierarchical structure of names
        2. Execute code literals in a sub-namespace of the invoking namespace
        3. Handle errors with builtin function

2. Syntax implementation:
    Full EBNF to accompany this document # A/N: Find and update EBNF file!
    
    1. Special characters:
        1. as per 1.1.5, each function call will be contained by parentheses
            1. Closing parenthesis indicates execution jump to code literal
            2. Opening parenthesis delimits "arguments" (used to calculate arg 
               length)
        2. code to not be executed immediately will be enclosed in curly braces
            1. defined as a code literal
            2. code literals can contain code literals
        3. text strings are delimited by double quotes
        4. escaped characters inside strings start with backslash
        5. comments are delimited with #, not stacking
            1. "# comment # inner # outer #" is equivalent to java 
               "/* comment */ inner /* outer */" not 
               "/* comment /* inner */ outer */"
   
    2. Literals:
        Literals are implied constructor invocations of builtin types, one of 
        the few implied syntactic elements of the language.
        
        1. Numbers are assumed decimal integer unless they contain a point
        2. See 2.1.3 for string syntax
            1. Strings may be multiline by escaping the newline character
        3. See 2.1.2 for code literals
        4. Boolean literals may be referenced by "True" and "False"

3. Builtins
    Builtin functions are the core of the language, implementing the nitty 
    gritty behind the scenes stuff that would normally be passed off to 
    statements in c-like languages or left unimplemented in languages like lisp.
    
    NOTE: Builtins are designed to modify the current environment and therefore 
    do not get their own execution environment.
    
    1. Binding and Execution:
        1. "def" binds a string and datum from the stack in the namespace tree
            1. the string is interpreted as a name before binding
            2. also functions as assignment, i.e. rebinding
        2. "exec" evaluates another file of code
            1. the file is considered a massive code literal in terms of the 
               invoking function.
        3. "dump" places a reference to the local namespace on the stack
        4. "merge" combines a namespace from the stack with the local namespace
            1. best used sparingly as it overwrites current names
        5. "del" removes a name from the local namespace.
            1. limited to local scope to stave off stupidity
    
    2. Flow Control:
        1. "if" conditionally executes two code literals from a boolean value
        2. "switch" executes any code literals paired with True boolean values
            1. values are on the stack with the boolean below the code literal
        3. "while" repeatedly executes a code literal on boolean conditional
        4. "try" catches any exception and runs an error handling literal
        5. "raise" raises exceptions
    
    3. Stack Manipulation:
        1. "swap" swaps top two items in the stack.
            1. useful for functions defining variables
        2. "dup" duplicates top item on stack
            1. not terribly useful aside from certain simple algorithms.
    
    4. Basic IO:
        1. "in" reads in a string from stdin and places it on the stack
            1. optional prompt parameter
        2. "out" pulls a string from the stack and pushes it to stdout
        
    5. Logic:
        1. "eq" returns true if top two items on stack are equal
        2. "lt" returns true if second item on stack is less than top of stack
        3. "gt" inverse of "lt"
        4. "le" equivalent to "((x y lt) (x y eq) or)"
        5. "ge" equivalent to "((x y gt) (x y eq) or)"
        6. "or" logical or of two booleans
        7. "and" logical and of two booleans
        8. "not" logical not of boolean
        9. "xor" logical xor of two booleans
        
    6. Math:
        1. "add" sums two numbers
        2. "sub" subtracts top of stack from second on stack
        3. "mul" multiplies two numbers
        4. "div" divides second on stack by top of stack
        5. "pow" exponentiates second item of stack to the power of the top of stack